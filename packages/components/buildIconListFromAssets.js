/**
 * A script to perform the following:
 *   1. Read icons from department-of-veterans-affairs/mobile-assets package 'icons' folder
 *   2. Process them into named import SVGs
 *   3. Add the named imports to IconMap object
 *   4. Output the results as src/components/Icon/iconList.ts file that is pulled into Icon.tsx
 */

// eslint-disable-next-line
const fs = require('fs')
const importLocation = '@department-of-veterans-affairs/mobile-assets/icons'

const importArray = []
const iconMap = []
let fileContent = ''

/**
 * Function to convert a kebab-case-name to UpperCamelCaseName
 * @param name - String of SVG icon name
 * @returns UpperCamelCaseName of SVG icon name
 */
function kebabToCamel(name) {
  return name
    .replace(/-./g, (letter) => letter[1].toUpperCase())
    .replace('.svg', '')
}

/**
 *
 * @param error - Error if one occurred attempting to read the directory
 * @param files - List of icon files in the assets package
 * @returns Error or writes src/components/Icon/iconList.ts file without return
 */
function processIconDirectory(error, files) {
  if (error) return console.log('readdir error: ', error)

  files.forEach((file) => {
    const iconName = kebabToCamel(file)
    const importPath = `${importLocation}/${file}`

    importArray.push(`import ${iconName} from '${importPath}'`)
    iconMap.push(iconName)
  })

  // console.log(importArray)
  // console.log(iconMap)
}

function formIconListFile() {
  if (importArray.length === 0 || iconMap.length === 0)
    throw Error('importArray or iconMap missing')

  // Set file header
  fileContent +=
    '/** This file is automatically generated by `yarn buildIcons` */ \n\n'

  // Build named import list
  importArray.forEach((importItem) => {
    fileContent += importItem + '\n'
  })

  // Build IconMap object
  fileContent += '\nexport const IconMap = {\n'
  iconMap.forEach((iconName) => {
    fileContent += `  ${iconName},\n`
  })
  fileContent += '}\n'

  return fileContent
}

fs.readdir('../../node_modules/' + importLocation, 'utf8', (error, files) =>
  processIconDirectory(error, files),
)

setTimeout(
  () =>
    fs.writeFile(
      './src/components/Icon/iconList.ts',
      formIconListFile(),
      (error) => {
        if (error) return console.log('writeFile error: ', error)
        return console.log('Successfully created iconList.ts!')
      },
    ),
  1000,
)
