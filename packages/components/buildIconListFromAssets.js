/**
 * A script to perform the following:
 *   1. Read icons and flags from department-of-veterans-affairs/mobile-assets package 'icons' and 'flags' folders
 *   2. Process the icons/flags into UpperCamelCase/flag_[country code] and arrange data for writing
 *   3. Output the results as src/components/Icon/iconList.ts file that is pulled into Icon.tsx
 */

// eslint-disable-next-line
const fs = require('fs')

const iconImportLocation = '@department-of-veterans-affairs/mobile-assets/icons'
const flagImportLocation = '@department-of-veterans-affairs/mobile-assets/flags'

const iconList = []
const iconImportPathList = {}

/**
 * Function to massage SVG file name to an UpperCamelCase icon name
 * @param name - String of SVG file name
 * @returns UpperCamelCase icon name
 */
function parseIconName(name) {
  if (name === 'vads') return '' // Remove 'vads' from list; it is a folder, not file
  if (name.startsWith('vads/')) name = name.replace('vads/', '') // Remove 'vads/' folder prefix
  // Convert name to UpperCamelCase
  name =
    name.charAt(0).toUpperCase() +
    name.substring(1).replace(/_./g, (letter) => letter[1].toUpperCase())
  name = name.replace('.svg', '') // Remove file type

  if (name === 'Tty') return 'TTY' // Correction for acronym name

  return name
}

/**
 * Function to massage SVG file name to flag_[country code] name
 * @param name - String of SVG file name
 * @returns flag_[country code] name
 */
function parseFlagName(name) {
  name = name.replace('.svg', '') // Remove file type
  name = name.replace('-', '_') // Convert '-' separators to '_'
  name = 'flag_' + name.toUpperCase()

  return name
}

/**
 * Function to build the content of the output file
 */
function formIconListFile() {
  let fileContent = ''

  // Set file header
  fileContent +=
    '/** This file is automatically generated by `yarn buildIcons` */ \n\n'

  // Build named import list
  for (const icon of iconList) {
    fileContent += `import ${icon} from '${iconImportPathList[icon]}'\n`
  }

  // Build IconMap object
  fileContent += '\nexport const IconMap = {\n'
  for (const icon of iconList) {
    fileContent += `  ${icon},\n`
  }
  fileContent += '}\n'

  return fileContent
}

/** Begin script */

// Retrieve icon and flag files from assets package
const iconFiles = fs.readdirSync(`../../node_modules/${iconImportLocation}`, {
  recursive: true,
})
const flagFiles = fs.readdirSync(`../../node_modules/${flagImportLocation}`, {
  recursive: true,
})

// Process icon files list into requisite icon data
for (const icon of iconFiles) {
  const iconName = parseIconName(icon)
  const importPath = `${iconImportLocation}/${icon}`

  if (!iconName) continue

  iconList.push(iconName)
  iconImportPathList[iconName] = importPath
}

// Process flag files list into requisite icon data
for (const flag of flagFiles) {
  const flagName = parseFlagName(flag)
  const importPath = `${flagImportLocation}/${flag}`

  if (!flagName) continue

  iconList.push(flagName)
  iconImportPathList[flagName] = importPath
}

// Sort icon data
iconList.sort()

// Form file content and create iconList.ts
fs.writeFile(
  './src/components/Icon/iconList.ts',
  formIconListFile(),
  (error) => {
    if (error) return console.log('writeFile error: ', error)
    return console.log('Successfully created iconList.ts!')
  },
)
